
cond_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000610  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002f5  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015f  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000019b  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000242  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  00000f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1b c0       	rjmp	.+54     	; 0x3a <__bad_interrupt>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_clear_bss>:
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	01 c0       	rjmp	.+2      	; 0x30 <.do_clear_bss_start>

0000002e <.do_clear_bss_loop>:
  2e:	1d 92       	st	X+, r1

00000030 <.do_clear_bss_start>:
  30:	a6 36       	cpi	r26, 0x66	; 102
  32:	b2 07       	cpc	r27, r18
  34:	e1 f7       	brne	.-8      	; 0x2e <.do_clear_bss_loop>
  36:	6f d0       	rcall	.+222    	; 0x116 <main>
  38:	af c2       	rjmp	.+1374   	; 0x598 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <Get_LED_Status>:
		}
	}
	//3. goto 1
}

int Get_LED_Status(void){
  3c:	cf 92       	push	r12
  3e:	df 92       	push	r13
  40:	ef 92       	push	r14
  42:	ff 92       	push	r15
  44:	cf 93       	push	r28
  46:	df 93       	push	r29
	uint16_t TEMP1 = 0;
	uint16_t TEMP2 = 0;
	int status;
		
	// измерение напряжения на PB4 - LED_CATHODE
	ADCSRA |= (1<<ADEN); // Enable ADC
  48:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= 0xF0;
  4a:	87 b1       	in	r24, 0x07	; 7
  4c:	80 7f       	andi	r24, 0xF0	; 240
  4e:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1<<MUX3) | ~(1<<MUX2) | ~(1<<MUX0);	// PB4 is ADC input ADMUX = 0010
  50:	87 b1       	in	r24, 0x07	; 7
  52:	87 b9       	out	0x07, r24	; 7
	ADMUX|= (1<<MUX1);								// PB4 is ADC input
  54:	39 9a       	sbi	0x07, 1	; 7
	// запуск измерения
	ADCSRA |= (1<<ADSC);
  56:	36 9a       	sbi	0x06, 6	; 6
	// ожидание окончания измерения
	while(((ADCSRA >> ADIF) & 0x01) == 0){;}
  58:	34 9b       	sbis	0x06, 4	; 6
  5a:	fe cf       	rjmp	.-4      	; 0x58 <__SREG__+0x19>
	ADCSRA |= (1<<ADIF); // Clear ADC Interrupt flag
  5c:	34 9a       	sbi	0x06, 4	; 6
	// получение результата 
	TEMP1 = ADCL;	// сначала читаем ADCL
  5e:	64 b1       	in	r22, 0x04	; 4
	TEMP2 = ADCH;	// затем ADCH
  60:	85 b1       	in	r24, 0x05	; 5
	TEMP1 = TEMP1 | (TEMP2 << 8);
	ADCSRA &= ~(1<<ADEN);		// Disable ADC
  62:	37 98       	cbi	0x06, 7	; 6
	while(((ADCSRA >> ADIF) & 0x01) == 0){;}
	ADCSRA |= (1<<ADIF); // Clear ADC Interrupt flag
	// получение результата 
	TEMP1 = ADCL;	// сначала читаем ADCL
	TEMP2 = ADCH;	// затем ADCH
	TEMP1 = TEMP1 | (TEMP2 << 8);
  64:	70 e0       	ldi	r23, 0x00	; 0
  66:	78 2b       	or	r23, r24
	ADCSRA &= ~(1<<ADEN);		// Disable ADC
	 
	LED_CATHODE_VOLTAGE = (TEMP1*3.3)/1023;
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	74 d1       	rcall	.+744    	; 0x356 <__floatunsisf>
  6e:	23 e3       	ldi	r18, 0x33	; 51
  70:	33 e3       	ldi	r19, 0x33	; 51
  72:	43 e5       	ldi	r20, 0x53	; 83
  74:	50 e4       	ldi	r21, 0x40	; 64
  76:	01 d2       	rcall	.+1026   	; 0x47a <__mulsf3>
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	30 ec       	ldi	r19, 0xC0	; 192
  7c:	4f e7       	ldi	r20, 0x7F	; 127
  7e:	54 e4       	ldi	r21, 0x44	; 68
  80:	02 d1       	rcall	.+516    	; 0x286 <__divsf3>
  82:	6b 01       	movw	r12, r22
  84:	7c 01       	movw	r14, r24
// Debug
	//if(LED_CATHODE_VOLTAGE < 0.1){Turn_Relay_ON();}
	//else{Turn_Relay_OFF();}
	
	// измерение напряжения на PB3 - LED_ANODE
	ADCSRA |= (1<<ADEN); // Enable ADC
  86:	37 9a       	sbi	0x06, 7	; 6
	ADMUX &= 0xF0;	
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	80 7f       	andi	r24, 0xF0	; 240
  8c:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1<<MUX3) | ~(1<<MUX2) ;	//PB3 is ADC input ADMUX = 0011
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	87 b9       	out	0x07, r24	; 7
	ADMUX|= (1<<MUX1) | (1<<MUX0);		//PB3 is ADC input	
  92:	87 b1       	in	r24, 0x07	; 7
  94:	83 60       	ori	r24, 0x03	; 3
  96:	87 b9       	out	0x07, r24	; 7
	// запуск измерения
	ADCSRA |= (1<<ADSC);
  98:	36 9a       	sbi	0x06, 6	; 6
	// ожидание окончания измерения
	while(((ADCSRA >> ADIF) & 0x01) == 0){;}
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <__SREG__+0x5b>
	ADCSRA |= (1<<ADIF); // Clear ADC Interrupt flag
  9e:	34 9a       	sbi	0x06, 4	; 6
	// получение результата
	TEMP1 = ADCL;	// сначала читаем ADCL
  a0:	84 b1       	in	r24, 0x04	; 4
	TEMP2 = ADCH;				// затем ADCH
  a2:	25 b1       	in	r18, 0x05	; 5
	TEMP1 = TEMP1 | (TEMP2 << 8);
	ADCSRA &= ~(1<<ADEN);		// Disable ADC
  a4:	37 98       	cbi	0x06, 7	; 6
	while(((ADCSRA >> ADIF) & 0x01) == 0){;}
	ADCSRA |= (1<<ADIF); // Clear ADC Interrupt flag
	// получение результата
	TEMP1 = ADCL;	// сначала читаем ADCL
	TEMP2 = ADCH;				// затем ADCH
	TEMP1 = TEMP1 | (TEMP2 << 8);
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	92 2b       	or	r25, r18
	ADCSRA &= ~(1<<ADEN);		// Disable ADC
	
	
	LED_ANODE_VOLTAGE = (TEMP1*3.3)/1023;
  aa:	bc 01       	movw	r22, r24
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	52 d1       	rcall	.+676    	; 0x356 <__floatunsisf>
  b2:	23 e3       	ldi	r18, 0x33	; 51
  b4:	33 e3       	ldi	r19, 0x33	; 51
  b6:	43 e5       	ldi	r20, 0x53	; 83
  b8:	50 e4       	ldi	r21, 0x40	; 64
  ba:	df d1       	rcall	.+958    	; 0x47a <__mulsf3>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 ec       	ldi	r19, 0xC0	; 192
  c0:	4f e7       	ldi	r20, 0x7F	; 127
  c2:	54 e4       	ldi	r21, 0x44	; 68
  c4:	e0 d0       	rcall	.+448    	; 0x286 <__divsf3>
	//if(LED_ANODE_VOLTAGE > 0.4){Turn_Relay_ON();}
	//else{Turn_Relay_OFF();}
	//if(LED_CATHODE_VOLTAGE == LED_ANODE_VOLTAGE){Turn_Relay_ON();}
	//else{Turn_Relay_OFF();}
	
	LED_ANODE_VOLTAGE -= LED_CATHODE_VOLTAGE;	// Вычисляем падение напряжения на светодиоде+резистор:
  c6:	a7 01       	movw	r20, r14
  c8:	96 01       	movw	r18, r12
  ca:	78 d0       	rcall	.+240    	; 0x1bc <__subsf3>
	if(LED_ANODE_VOLTAGE > LED_VOLTAGE_TRESHOLD){status = ON;}		// Если падение больше установленного порога, значит светодиод включен
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	2d ec       	ldi	r18, 0xCD	; 205
  d2:	3c ec       	ldi	r19, 0xCC	; 204
  d4:	4c ec       	ldi	r20, 0xCC	; 204
  d6:	5e e3       	ldi	r21, 0x3E	; 62
  d8:	cc d1       	rcall	.+920    	; 0x472 <__gesf2>
  da:	18 16       	cp	r1, r24
  dc:	14 f0       	brlt	.+4      	; 0xe2 <__stack+0x3>
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0

//Debug	
	//if(status == ON){Turn_Relay_ON();}
	//else{Turn_Relay_OFF();}
	return(status);
}
  e2:	ce 01       	movw	r24, r28
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	ff 90       	pop	r15
  ea:	ef 90       	pop	r14
  ec:	df 90       	pop	r13
  ee:	cf 90       	pop	r12
  f0:	08 95       	ret

000000f2 <Get_Pin_State>:
int Get_Pin_State(int SW){
	int status = (PINB >> SW);
  f2:	26 b3       	in	r18, 0x16	; 22
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <Get_Pin_State+0xa>
  f8:	35 95       	asr	r19
  fa:	27 95       	ror	r18
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <Get_Pin_State+0x6>
	status &= 0x01;
	if(status == 0x01){status = OFF;}
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	20 ff       	sbrs	r18, 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <Get_Pin_State+0x1a>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
	else{status = ON;}
	return(status);
}
 10c:	08 95       	ret

0000010e <Turn_Relay_ON>:
void Turn_Relay_ON(void){
	PORTB |= (1<<RELAY_PIN);
 10e:	c1 9a       	sbi	0x18, 1	; 24
 110:	08 95       	ret

00000112 <Turn_Relay_OFF>:
}
void Turn_Relay_OFF(void){
	PORTB &= ~(1<<RELAY_PIN);
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	08 95       	ret

00000116 <main>:


int main(void)
{
    // Init GPIO
	DDRB = 0x00;
 116:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
 118:	18 ba       	out	0x18, r1	; 24
	
	// LED Input Pins
	DDRB &= ~(1<<LED_ANODE_PIN) | ~(1<<LED_CATHIODE_PIN); 
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	87 bb       	out	0x17, r24	; 23
	// SW1 & SW2 input pins
	DDRB &= ~(1<<SW1_PIN) | ~(1<<SW2_PIN); 
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	87 bb       	out	0x17, r24	; 23
	
	// Relay Output Pin
	DDRB |= (1<<RELAY_PIN);
 122:	b9 9a       	sbi	0x17, 1	; 23
	PORTB &= ~(1<<RELAY_PIN);
 124:	c1 98       	cbi	0x18, 1	; 24
	//DDRB |= (1<<PINB0);
	
	// Init ADC
	//ADCSRA = (1<<ADEN);
	// VCC used as Voltage Reference
	ADMUX &= ~(1<<REFS1) | ~(1<<REFS0);
 126:	87 b1       	in	r24, 0x07	; 7
 128:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	89 e6       	ldi	r24, 0x69	; 105
 12e:	98 e1       	ldi	r25, 0x18	; 24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x1a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x24>
 13a:	00 00       	nop
	while (1) 
    {
	 //1. ждём одну секунду, ничего не делаем (заряжаем конденсаторы, если нужно)
	    _delay_ms(PAUSE_TIME);
		//2. (несколько раз) опрашиваем состояние контактов EN и ONOFF на разъёме Х2, и состояние светодиода.
		SW1_STATUS = Get_Pin_State(SW1_PIN);		// Опрос SW1
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	d8 df       	rcall	.-80     	; 0xf2 <Get_Pin_State>
 142:	90 93 65 00 	sts	0x0065, r25
 146:	80 93 64 00 	sts	0x0064, r24
		SW2_STATUS = Get_Pin_State(SW2_PIN);		// Опрос SW2
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	d1 df       	rcall	.-94     	; 0xf2 <Get_Pin_State>
 150:	90 93 63 00 	sts	0x0063, r25
 154:	80 93 62 00 	sts	0x0062, r24
		LED_STATUS = Get_LED_Status();		// Опрос светодиода
 158:	71 df       	rcall	.-286    	; 0x3c <Get_LED_Status>
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	80 93 60 00 	sts	0x0060, r24
		
										// Если выключатель SW1 (EN) разомкнут, то ничего не делаем. 
		if(SW1_STATUS == ON){			// В противном случае,		
 162:	20 91 64 00 	lds	r18, 0x0064
 166:	30 91 65 00 	lds	r19, 0x0065
 16a:	21 30       	cpi	r18, 0x01	; 1
 16c:	31 05       	cpc	r19, r1
 16e:	e9 f6       	brne	.-70     	; 0x12a <main+0x14>
			if(LED_STATUS == ON){		// если светодиод горит 
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	91 f4       	brne	.+36     	; 0x198 <main+0x82>
				if(SW2_STATUS == OFF){	// а контакты SW2 (ONOFF) разомкнуты, 
 174:	80 91 62 00 	lds	r24, 0x0062
 178:	90 91 63 00 	lds	r25, 0x0063
 17c:	89 2b       	or	r24, r25
 17e:	a9 f6       	brne	.-86     	; 0x12a <main+0x14>
					Turn_Relay_ON();	//  то «нажимаем кнопку» - замыкаем контакты 4 и 5 на 150 миллисекунд.	
 180:	c6 df       	rcall	.-116    	; 0x10e <Turn_Relay_ON>
 182:	2f e7       	ldi	r18, 0x7F	; 127
 184:	89 ea       	ldi	r24, 0xA9	; 169
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x72>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x7c>
 192:	00 00       	nop
					_delay_ms(RELAY_ON_TIME);			
					Turn_Relay_OFF();
 194:	be df       	rcall	.-132    	; 0x112 <Turn_Relay_OFF>
 196:	c9 cf       	rjmp	.-110    	; 0x12a <main+0x14>
				}
			}
			else{						//	ИЛИ светодиод не горит, 
				if(SW2_STATUS == ON){	// а контакты SW2 (ONOFF) замкнуты,
 198:	80 91 62 00 	lds	r24, 0x0062
 19c:	90 91 63 00 	lds	r25, 0x0063
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	19 f6       	brne	.-122    	; 0x12a <main+0x14>
					Turn_Relay_ON();	//  то «нажимаем кнопку» - замыкаем контакты 4 и 5 на 150 миллисекунд.
 1a4:	b4 df       	rcall	.-152    	; 0x10e <Turn_Relay_ON>
 1a6:	2f e7       	ldi	r18, 0x7F	; 127
 1a8:	89 ea       	ldi	r24, 0xA9	; 169
 1aa:	93 e0       	ldi	r25, 0x03	; 3
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x96>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xa0>
 1b6:	00 00       	nop
					_delay_ms(RELAY_ON_TIME);
					Turn_Relay_OFF();	
 1b8:	ac df       	rcall	.-168    	; 0x112 <Turn_Relay_OFF>
 1ba:	b7 cf       	rjmp	.-146    	; 0x12a <main+0x14>

000001bc <__subsf3>:
 1bc:	50 58       	subi	r21, 0x80	; 128

000001be <__addsf3>:
 1be:	bb 27       	eor	r27, r27
 1c0:	aa 27       	eor	r26, r26
 1c2:	0e d0       	rcall	.+28     	; 0x1e0 <__addsf3x>
 1c4:	1c c1       	rjmp	.+568    	; 0x3fe <__fp_round>
 1c6:	0d d1       	rcall	.+538    	; 0x3e2 <__fp_pscA>
 1c8:	30 f0       	brcs	.+12     	; 0x1d6 <__addsf3+0x18>
 1ca:	12 d1       	rcall	.+548    	; 0x3f0 <__fp_pscB>
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <__addsf3+0x18>
 1ce:	31 f4       	brne	.+12     	; 0x1dc <__addsf3+0x1e>
 1d0:	9f 3f       	cpi	r25, 0xFF	; 255
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <__addsf3+0x1a>
 1d4:	1e f4       	brtc	.+6      	; 0x1dc <__addsf3+0x1e>
 1d6:	02 c1       	rjmp	.+516    	; 0x3dc <__fp_nan>
 1d8:	0e f4       	brtc	.+2      	; 0x1dc <__addsf3+0x1e>
 1da:	e0 95       	com	r30
 1dc:	e7 fb       	bst	r30, 7
 1de:	f8 c0       	rjmp	.+496    	; 0x3d0 <__fp_inf>

000001e0 <__addsf3x>:
 1e0:	e9 2f       	mov	r30, r25
 1e2:	1e d1       	rcall	.+572    	; 0x420 <__fp_split3>
 1e4:	80 f3       	brcs	.-32     	; 0x1c6 <__addsf3+0x8>
 1e6:	ba 17       	cp	r27, r26
 1e8:	62 07       	cpc	r22, r18
 1ea:	73 07       	cpc	r23, r19
 1ec:	84 07       	cpc	r24, r20
 1ee:	95 07       	cpc	r25, r21
 1f0:	18 f0       	brcs	.+6      	; 0x1f8 <__addsf3x+0x18>
 1f2:	71 f4       	brne	.+28     	; 0x210 <__addsf3x+0x30>
 1f4:	9e f5       	brtc	.+102    	; 0x25c <__addsf3x+0x7c>
 1f6:	36 c1       	rjmp	.+620    	; 0x464 <__fp_zero>
 1f8:	0e f4       	brtc	.+2      	; 0x1fc <__addsf3x+0x1c>
 1fa:	e0 95       	com	r30
 1fc:	0b 2e       	mov	r0, r27
 1fe:	ba 2f       	mov	r27, r26
 200:	a0 2d       	mov	r26, r0
 202:	0b 01       	movw	r0, r22
 204:	b9 01       	movw	r22, r18
 206:	90 01       	movw	r18, r0
 208:	0c 01       	movw	r0, r24
 20a:	ca 01       	movw	r24, r20
 20c:	a0 01       	movw	r20, r0
 20e:	11 24       	eor	r1, r1
 210:	ff 27       	eor	r31, r31
 212:	59 1b       	sub	r21, r25
 214:	99 f0       	breq	.+38     	; 0x23c <__addsf3x+0x5c>
 216:	59 3f       	cpi	r21, 0xF9	; 249
 218:	50 f4       	brcc	.+20     	; 0x22e <__addsf3x+0x4e>
 21a:	50 3e       	cpi	r21, 0xE0	; 224
 21c:	68 f1       	brcs	.+90     	; 0x278 <__addsf3x+0x98>
 21e:	1a 16       	cp	r1, r26
 220:	f0 40       	sbci	r31, 0x00	; 0
 222:	a2 2f       	mov	r26, r18
 224:	23 2f       	mov	r18, r19
 226:	34 2f       	mov	r19, r20
 228:	44 27       	eor	r20, r20
 22a:	58 5f       	subi	r21, 0xF8	; 248
 22c:	f3 cf       	rjmp	.-26     	; 0x214 <__addsf3x+0x34>
 22e:	46 95       	lsr	r20
 230:	37 95       	ror	r19
 232:	27 95       	ror	r18
 234:	a7 95       	ror	r26
 236:	f0 40       	sbci	r31, 0x00	; 0
 238:	53 95       	inc	r21
 23a:	c9 f7       	brne	.-14     	; 0x22e <__addsf3x+0x4e>
 23c:	7e f4       	brtc	.+30     	; 0x25c <__addsf3x+0x7c>
 23e:	1f 16       	cp	r1, r31
 240:	ba 0b       	sbc	r27, r26
 242:	62 0b       	sbc	r22, r18
 244:	73 0b       	sbc	r23, r19
 246:	84 0b       	sbc	r24, r20
 248:	ba f0       	brmi	.+46     	; 0x278 <__addsf3x+0x98>
 24a:	91 50       	subi	r25, 0x01	; 1
 24c:	a1 f0       	breq	.+40     	; 0x276 <__addsf3x+0x96>
 24e:	ff 0f       	add	r31, r31
 250:	bb 1f       	adc	r27, r27
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	c2 f7       	brpl	.-16     	; 0x24a <__addsf3x+0x6a>
 25a:	0e c0       	rjmp	.+28     	; 0x278 <__addsf3x+0x98>
 25c:	ba 0f       	add	r27, r26
 25e:	62 1f       	adc	r22, r18
 260:	73 1f       	adc	r23, r19
 262:	84 1f       	adc	r24, r20
 264:	48 f4       	brcc	.+18     	; 0x278 <__addsf3x+0x98>
 266:	87 95       	ror	r24
 268:	77 95       	ror	r23
 26a:	67 95       	ror	r22
 26c:	b7 95       	ror	r27
 26e:	f7 95       	ror	r31
 270:	9e 3f       	cpi	r25, 0xFE	; 254
 272:	08 f0       	brcs	.+2      	; 0x276 <__addsf3x+0x96>
 274:	b3 cf       	rjmp	.-154    	; 0x1dc <__addsf3+0x1e>
 276:	93 95       	inc	r25
 278:	88 0f       	add	r24, r24
 27a:	08 f0       	brcs	.+2      	; 0x27e <__addsf3x+0x9e>
 27c:	99 27       	eor	r25, r25
 27e:	ee 0f       	add	r30, r30
 280:	97 95       	ror	r25
 282:	87 95       	ror	r24
 284:	08 95       	ret

00000286 <__divsf3>:
 286:	0c d0       	rcall	.+24     	; 0x2a0 <__divsf3x>
 288:	ba c0       	rjmp	.+372    	; 0x3fe <__fp_round>
 28a:	b2 d0       	rcall	.+356    	; 0x3f0 <__fp_pscB>
 28c:	40 f0       	brcs	.+16     	; 0x29e <__divsf3+0x18>
 28e:	a9 d0       	rcall	.+338    	; 0x3e2 <__fp_pscA>
 290:	30 f0       	brcs	.+12     	; 0x29e <__divsf3+0x18>
 292:	21 f4       	brne	.+8      	; 0x29c <__divsf3+0x16>
 294:	5f 3f       	cpi	r21, 0xFF	; 255
 296:	19 f0       	breq	.+6      	; 0x29e <__divsf3+0x18>
 298:	9b c0       	rjmp	.+310    	; 0x3d0 <__fp_inf>
 29a:	51 11       	cpse	r21, r1
 29c:	e4 c0       	rjmp	.+456    	; 0x466 <__fp_szero>
 29e:	9e c0       	rjmp	.+316    	; 0x3dc <__fp_nan>

000002a0 <__divsf3x>:
 2a0:	bf d0       	rcall	.+382    	; 0x420 <__fp_split3>
 2a2:	98 f3       	brcs	.-26     	; 0x28a <__divsf3+0x4>

000002a4 <__divsf3_pse>:
 2a4:	99 23       	and	r25, r25
 2a6:	c9 f3       	breq	.-14     	; 0x29a <__divsf3+0x14>
 2a8:	55 23       	and	r21, r21
 2aa:	b1 f3       	breq	.-20     	; 0x298 <__divsf3+0x12>
 2ac:	95 1b       	sub	r25, r21
 2ae:	55 0b       	sbc	r21, r21
 2b0:	bb 27       	eor	r27, r27
 2b2:	aa 27       	eor	r26, r26
 2b4:	62 17       	cp	r22, r18
 2b6:	73 07       	cpc	r23, r19
 2b8:	84 07       	cpc	r24, r20
 2ba:	38 f0       	brcs	.+14     	; 0x2ca <__divsf3_pse+0x26>
 2bc:	9f 5f       	subi	r25, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	44 1f       	adc	r20, r20
 2c6:	aa 1f       	adc	r26, r26
 2c8:	a9 f3       	breq	.-22     	; 0x2b4 <__divsf3_pse+0x10>
 2ca:	33 d0       	rcall	.+102    	; 0x332 <__divsf3_pse+0x8e>
 2cc:	0e 2e       	mov	r0, r30
 2ce:	3a f0       	brmi	.+14     	; 0x2de <__divsf3_pse+0x3a>
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	30 d0       	rcall	.+96     	; 0x334 <__divsf3_pse+0x90>
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	50 40       	sbci	r21, 0x00	; 0
 2d8:	e6 95       	lsr	r30
 2da:	00 1c       	adc	r0, r0
 2dc:	ca f7       	brpl	.-14     	; 0x2d0 <__divsf3_pse+0x2c>
 2de:	29 d0       	rcall	.+82     	; 0x332 <__divsf3_pse+0x8e>
 2e0:	fe 2f       	mov	r31, r30
 2e2:	27 d0       	rcall	.+78     	; 0x332 <__divsf3_pse+0x8e>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	bb 1f       	adc	r27, r27
 2ec:	26 17       	cp	r18, r22
 2ee:	37 07       	cpc	r19, r23
 2f0:	48 07       	cpc	r20, r24
 2f2:	ab 07       	cpc	r26, r27
 2f4:	b0 e8       	ldi	r27, 0x80	; 128
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__divsf3_pse+0x56>
 2f8:	bb 0b       	sbc	r27, r27
 2fa:	80 2d       	mov	r24, r0
 2fc:	bf 01       	movw	r22, r30
 2fe:	ff 27       	eor	r31, r31
 300:	93 58       	subi	r25, 0x83	; 131
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	2a f0       	brmi	.+10     	; 0x310 <__divsf3_pse+0x6c>
 306:	9e 3f       	cpi	r25, 0xFE	; 254
 308:	51 05       	cpc	r21, r1
 30a:	68 f0       	brcs	.+26     	; 0x326 <__divsf3_pse+0x82>
 30c:	61 c0       	rjmp	.+194    	; 0x3d0 <__fp_inf>
 30e:	ab c0       	rjmp	.+342    	; 0x466 <__fp_szero>
 310:	5f 3f       	cpi	r21, 0xFF	; 255
 312:	ec f3       	brlt	.-6      	; 0x30e <__divsf3_pse+0x6a>
 314:	98 3e       	cpi	r25, 0xE8	; 232
 316:	dc f3       	brlt	.-10     	; 0x30e <__divsf3_pse+0x6a>
 318:	86 95       	lsr	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f7 95       	ror	r31
 322:	9f 5f       	subi	r25, 0xFF	; 255
 324:	c9 f7       	brne	.-14     	; 0x318 <__divsf3_pse+0x74>
 326:	88 0f       	add	r24, r24
 328:	91 1d       	adc	r25, r1
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret
 332:	e1 e0       	ldi	r30, 0x01	; 1
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	bb 1f       	adc	r27, r27
 33c:	62 17       	cp	r22, r18
 33e:	73 07       	cpc	r23, r19
 340:	84 07       	cpc	r24, r20
 342:	ba 07       	cpc	r27, r26
 344:	20 f0       	brcs	.+8      	; 0x34e <__divsf3_pse+0xaa>
 346:	62 1b       	sub	r22, r18
 348:	73 0b       	sbc	r23, r19
 34a:	84 0b       	sbc	r24, r20
 34c:	ba 0b       	sbc	r27, r26
 34e:	ee 1f       	adc	r30, r30
 350:	88 f7       	brcc	.-30     	; 0x334 <__divsf3_pse+0x90>
 352:	e0 95       	com	r30
 354:	08 95       	ret

00000356 <__floatunsisf>:
 356:	e8 94       	clt
 358:	09 c0       	rjmp	.+18     	; 0x36c <__floatsisf+0x12>

0000035a <__floatsisf>:
 35a:	97 fb       	bst	r25, 7
 35c:	3e f4       	brtc	.+14     	; 0x36c <__floatsisf+0x12>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	99 23       	and	r25, r25
 36e:	a9 f0       	breq	.+42     	; 0x39a <__floatsisf+0x40>
 370:	f9 2f       	mov	r31, r25
 372:	96 e9       	ldi	r25, 0x96	; 150
 374:	bb 27       	eor	r27, r27
 376:	93 95       	inc	r25
 378:	f6 95       	lsr	r31
 37a:	87 95       	ror	r24
 37c:	77 95       	ror	r23
 37e:	67 95       	ror	r22
 380:	b7 95       	ror	r27
 382:	f1 11       	cpse	r31, r1
 384:	f8 cf       	rjmp	.-16     	; 0x376 <__floatsisf+0x1c>
 386:	fa f4       	brpl	.+62     	; 0x3c6 <__floatsisf+0x6c>
 388:	bb 0f       	add	r27, r27
 38a:	11 f4       	brne	.+4      	; 0x390 <__floatsisf+0x36>
 38c:	60 ff       	sbrs	r22, 0
 38e:	1b c0       	rjmp	.+54     	; 0x3c6 <__floatsisf+0x6c>
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	16 c0       	rjmp	.+44     	; 0x3c6 <__floatsisf+0x6c>
 39a:	88 23       	and	r24, r24
 39c:	11 f0       	breq	.+4      	; 0x3a2 <__floatsisf+0x48>
 39e:	96 e9       	ldi	r25, 0x96	; 150
 3a0:	11 c0       	rjmp	.+34     	; 0x3c4 <__floatsisf+0x6a>
 3a2:	77 23       	and	r23, r23
 3a4:	21 f0       	breq	.+8      	; 0x3ae <__floatsisf+0x54>
 3a6:	9e e8       	ldi	r25, 0x8E	; 142
 3a8:	87 2f       	mov	r24, r23
 3aa:	76 2f       	mov	r23, r22
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <__floatsisf+0x5e>
 3ae:	66 23       	and	r22, r22
 3b0:	71 f0       	breq	.+28     	; 0x3ce <__floatsisf+0x74>
 3b2:	96 e8       	ldi	r25, 0x86	; 134
 3b4:	86 2f       	mov	r24, r22
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	2a f0       	brmi	.+10     	; 0x3c6 <__floatsisf+0x6c>
 3bc:	9a 95       	dec	r25
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	da f7       	brpl	.-10     	; 0x3bc <__floatsisf+0x62>
 3c6:	88 0f       	add	r24, r24
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	97 f9       	bld	r25, 7
 3ce:	08 95       	ret

000003d0 <__fp_inf>:
 3d0:	97 f9       	bld	r25, 7
 3d2:	9f 67       	ori	r25, 0x7F	; 127
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	08 95       	ret

000003dc <__fp_nan>:
 3dc:	9f ef       	ldi	r25, 0xFF	; 255
 3de:	80 ec       	ldi	r24, 0xC0	; 192
 3e0:	08 95       	ret

000003e2 <__fp_pscA>:
 3e2:	00 24       	eor	r0, r0
 3e4:	0a 94       	dec	r0
 3e6:	16 16       	cp	r1, r22
 3e8:	17 06       	cpc	r1, r23
 3ea:	18 06       	cpc	r1, r24
 3ec:	09 06       	cpc	r0, r25
 3ee:	08 95       	ret

000003f0 <__fp_pscB>:
 3f0:	00 24       	eor	r0, r0
 3f2:	0a 94       	dec	r0
 3f4:	12 16       	cp	r1, r18
 3f6:	13 06       	cpc	r1, r19
 3f8:	14 06       	cpc	r1, r20
 3fa:	05 06       	cpc	r0, r21
 3fc:	08 95       	ret

000003fe <__fp_round>:
 3fe:	09 2e       	mov	r0, r25
 400:	03 94       	inc	r0
 402:	00 0c       	add	r0, r0
 404:	11 f4       	brne	.+4      	; 0x40a <__fp_round+0xc>
 406:	88 23       	and	r24, r24
 408:	52 f0       	brmi	.+20     	; 0x41e <__fp_round+0x20>
 40a:	bb 0f       	add	r27, r27
 40c:	40 f4       	brcc	.+16     	; 0x41e <__fp_round+0x20>
 40e:	bf 2b       	or	r27, r31
 410:	11 f4       	brne	.+4      	; 0x416 <__fp_round+0x18>
 412:	60 ff       	sbrs	r22, 0
 414:	04 c0       	rjmp	.+8      	; 0x41e <__fp_round+0x20>
 416:	6f 5f       	subi	r22, 0xFF	; 255
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	8f 4f       	sbci	r24, 0xFF	; 255
 41c:	9f 4f       	sbci	r25, 0xFF	; 255
 41e:	08 95       	ret

00000420 <__fp_split3>:
 420:	57 fd       	sbrc	r21, 7
 422:	90 58       	subi	r25, 0x80	; 128
 424:	44 0f       	add	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	59 f0       	breq	.+22     	; 0x440 <__fp_splitA+0x10>
 42a:	5f 3f       	cpi	r21, 0xFF	; 255
 42c:	71 f0       	breq	.+28     	; 0x44a <__fp_splitA+0x1a>
 42e:	47 95       	ror	r20

00000430 <__fp_splitA>:
 430:	88 0f       	add	r24, r24
 432:	97 fb       	bst	r25, 7
 434:	99 1f       	adc	r25, r25
 436:	61 f0       	breq	.+24     	; 0x450 <__fp_splitA+0x20>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	79 f0       	breq	.+30     	; 0x45a <__fp_splitA+0x2a>
 43c:	87 95       	ror	r24
 43e:	08 95       	ret
 440:	12 16       	cp	r1, r18
 442:	13 06       	cpc	r1, r19
 444:	14 06       	cpc	r1, r20
 446:	55 1f       	adc	r21, r21
 448:	f2 cf       	rjmp	.-28     	; 0x42e <__fp_split3+0xe>
 44a:	46 95       	lsr	r20
 44c:	f1 df       	rcall	.-30     	; 0x430 <__fp_splitA>
 44e:	08 c0       	rjmp	.+16     	; 0x460 <__fp_splitA+0x30>
 450:	16 16       	cp	r1, r22
 452:	17 06       	cpc	r1, r23
 454:	18 06       	cpc	r1, r24
 456:	99 1f       	adc	r25, r25
 458:	f1 cf       	rjmp	.-30     	; 0x43c <__fp_splitA+0xc>
 45a:	86 95       	lsr	r24
 45c:	71 05       	cpc	r23, r1
 45e:	61 05       	cpc	r22, r1
 460:	08 94       	sec
 462:	08 95       	ret

00000464 <__fp_zero>:
 464:	e8 94       	clt

00000466 <__fp_szero>:
 466:	bb 27       	eor	r27, r27
 468:	66 27       	eor	r22, r22
 46a:	77 27       	eor	r23, r23
 46c:	cb 01       	movw	r24, r22
 46e:	97 f9       	bld	r25, 7
 470:	08 95       	ret

00000472 <__gesf2>:
 472:	6e d0       	rcall	.+220    	; 0x550 <__fp_cmp>
 474:	08 f4       	brcc	.+2      	; 0x478 <__gesf2+0x6>
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	08 95       	ret

0000047a <__mulsf3>:
 47a:	0a d0       	rcall	.+20     	; 0x490 <__mulsf3x>
 47c:	c0 cf       	rjmp	.-128    	; 0x3fe <__fp_round>
 47e:	b1 df       	rcall	.-158    	; 0x3e2 <__fp_pscA>
 480:	28 f0       	brcs	.+10     	; 0x48c <__mulsf3+0x12>
 482:	b6 df       	rcall	.-148    	; 0x3f0 <__fp_pscB>
 484:	18 f0       	brcs	.+6      	; 0x48c <__mulsf3+0x12>
 486:	95 23       	and	r25, r21
 488:	09 f0       	breq	.+2      	; 0x48c <__mulsf3+0x12>
 48a:	a2 cf       	rjmp	.-188    	; 0x3d0 <__fp_inf>
 48c:	a7 cf       	rjmp	.-178    	; 0x3dc <__fp_nan>
 48e:	eb cf       	rjmp	.-42     	; 0x466 <__fp_szero>

00000490 <__mulsf3x>:
 490:	c7 df       	rcall	.-114    	; 0x420 <__fp_split3>
 492:	a8 f3       	brcs	.-22     	; 0x47e <__mulsf3+0x4>

00000494 <__mulsf3_pse>:
 494:	99 23       	and	r25, r25
 496:	d9 f3       	breq	.-10     	; 0x48e <__mulsf3+0x14>
 498:	55 23       	and	r21, r21
 49a:	c9 f3       	breq	.-14     	; 0x48e <__mulsf3+0x14>
 49c:	95 0f       	add	r25, r21
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	55 1f       	adc	r21, r21
 4a2:	aa 27       	eor	r26, r26
 4a4:	ee 27       	eor	r30, r30
 4a6:	ff 27       	eor	r31, r31
 4a8:	bb 27       	eor	r27, r27
 4aa:	00 24       	eor	r0, r0
 4ac:	08 94       	sec
 4ae:	67 95       	ror	r22
 4b0:	20 f4       	brcc	.+8      	; 0x4ba <__mulsf3_pse+0x26>
 4b2:	e2 0f       	add	r30, r18
 4b4:	f3 1f       	adc	r31, r19
 4b6:	b4 1f       	adc	r27, r20
 4b8:	0a 1e       	adc	r0, r26
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	44 1f       	adc	r20, r20
 4c0:	aa 1f       	adc	r26, r26
 4c2:	66 95       	lsr	r22
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__mulsf3_pse+0x1c>
 4c6:	77 95       	ror	r23
 4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__mulsf3_pse+0x42>
 4ca:	f3 0f       	add	r31, r19
 4cc:	b4 1f       	adc	r27, r20
 4ce:	0a 1e       	adc	r0, r26
 4d0:	12 1e       	adc	r1, r18
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__mulsf3_pse+0x42>
 4d4:	63 95       	inc	r22
 4d6:	33 0f       	add	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	aa 1f       	adc	r26, r26
 4dc:	22 1f       	adc	r18, r18
 4de:	76 95       	lsr	r23
 4e0:	99 f7       	brne	.-26     	; 0x4c8 <__mulsf3_pse+0x34>
 4e2:	87 95       	ror	r24
 4e4:	20 f4       	brcc	.+8      	; 0x4ee <__mulsf3_pse+0x5a>
 4e6:	b4 0f       	add	r27, r20
 4e8:	0a 1e       	adc	r0, r26
 4ea:	12 1e       	adc	r1, r18
 4ec:	63 1f       	adc	r22, r19
 4ee:	44 0f       	add	r20, r20
 4f0:	aa 1f       	adc	r26, r26
 4f2:	22 1f       	adc	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	86 95       	lsr	r24
 4f8:	a9 f7       	brne	.-22     	; 0x4e4 <__mulsf3_pse+0x50>
 4fa:	86 2f       	mov	r24, r22
 4fc:	71 2d       	mov	r23, r1
 4fe:	60 2d       	mov	r22, r0
 500:	11 24       	eor	r1, r1
 502:	9f 57       	subi	r25, 0x7F	; 127
 504:	50 40       	sbci	r21, 0x00	; 0
 506:	8a f0       	brmi	.+34     	; 0x52a <__mulsf3_pse+0x96>
 508:	e1 f0       	breq	.+56     	; 0x542 <__mulsf3_pse+0xae>
 50a:	88 23       	and	r24, r24
 50c:	4a f0       	brmi	.+18     	; 0x520 <__mulsf3_pse+0x8c>
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	bb 1f       	adc	r27, r27
 514:	66 1f       	adc	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	50 40       	sbci	r21, 0x00	; 0
 51e:	a9 f7       	brne	.-22     	; 0x50a <__mulsf3_pse+0x76>
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	51 05       	cpc	r21, r1
 524:	70 f0       	brcs	.+28     	; 0x542 <__mulsf3_pse+0xae>
 526:	54 cf       	rjmp	.-344    	; 0x3d0 <__fp_inf>
 528:	9e cf       	rjmp	.-196    	; 0x466 <__fp_szero>
 52a:	5f 3f       	cpi	r21, 0xFF	; 255
 52c:	ec f3       	brlt	.-6      	; 0x528 <__mulsf3_pse+0x94>
 52e:	98 3e       	cpi	r25, 0xE8	; 232
 530:	dc f3       	brlt	.-10     	; 0x528 <__mulsf3_pse+0x94>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	e7 95       	ror	r30
 53e:	9f 5f       	subi	r25, 0xFF	; 255
 540:	c1 f7       	brne	.-16     	; 0x532 <__mulsf3_pse+0x9e>
 542:	fe 2b       	or	r31, r30
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__fp_cmp>:
 550:	99 0f       	add	r25, r25
 552:	00 08       	sbc	r0, r0
 554:	55 0f       	add	r21, r21
 556:	aa 0b       	sbc	r26, r26
 558:	e0 e8       	ldi	r30, 0x80	; 128
 55a:	fe ef       	ldi	r31, 0xFE	; 254
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	e8 07       	cpc	r30, r24
 562:	f9 07       	cpc	r31, r25
 564:	c0 f0       	brcs	.+48     	; 0x596 <__fp_cmp+0x46>
 566:	12 16       	cp	r1, r18
 568:	13 06       	cpc	r1, r19
 56a:	e4 07       	cpc	r30, r20
 56c:	f5 07       	cpc	r31, r21
 56e:	98 f0       	brcs	.+38     	; 0x596 <__fp_cmp+0x46>
 570:	62 1b       	sub	r22, r18
 572:	73 0b       	sbc	r23, r19
 574:	84 0b       	sbc	r24, r20
 576:	95 0b       	sbc	r25, r21
 578:	39 f4       	brne	.+14     	; 0x588 <__fp_cmp+0x38>
 57a:	0a 26       	eor	r0, r26
 57c:	61 f0       	breq	.+24     	; 0x596 <__fp_cmp+0x46>
 57e:	23 2b       	or	r18, r19
 580:	24 2b       	or	r18, r20
 582:	25 2b       	or	r18, r21
 584:	21 f4       	brne	.+8      	; 0x58e <__fp_cmp+0x3e>
 586:	08 95       	ret
 588:	0a 26       	eor	r0, r26
 58a:	09 f4       	brne	.+2      	; 0x58e <__fp_cmp+0x3e>
 58c:	a1 40       	sbci	r26, 0x01	; 1
 58e:	a6 95       	lsr	r26
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	81 1d       	adc	r24, r1
 594:	81 1d       	adc	r24, r1
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
